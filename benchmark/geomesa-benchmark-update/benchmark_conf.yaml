#create a sample benchmark configuration file, which has variables that define the benchmark parameters.
# The benchmark configuration file is used to define the benchmark parameters, such as the number of threads, the number of iterations, and the number of features to ingest
surrounding:
  name: surrounding
  threads: 2
  query:  f"DWITHIN(cycling_data.point_geom, POINT({poslong} {poslat}), 5000, meters)"
  limit: 50

ride_traffic:
  name: ride_traffic
  threads: 2
  query:
  limit: 50

intersections:
  name: intersections
  threads: 2
  query: f"INTERSECTS(trip, {random_berlin_route})" #f"INTERSECTS(trip, LINESTRING({poslongstart} {poslatstart}, {poslongend} {poslatend}))"
  limit: 50

insert_ride:
  name: insert_ride
  threads: 2
  query: 
  limit: 10

bulk_insert_rides:
  name: bulk_insert_rides
  threads: 1
  query: 
  limit: 10

bounding_box:
  name: bounding_box
  threads: 2
  query: f"WITHIN(geom, POLYGON(({poslong-size} {poslat-size}, {poslong-size} {poslat+size}, 
    {poslong+size} {poslat+size}, {poslong+size} {poslat-size}, {poslong-size} {poslat-size})))"
  limit: 50

polygonal_area:
  name: polygonal_area
  threads: 2
  query: f"WITHIN(geom, POLYGON(({lon1} {lat1}, {lon2} {lat2}, {lon3} {lat3}, {lon4} {lat4}, {lon1} {lat1})))"
  limit: 50

time_interval:
  name: time_interval
  threads: 2
  query: f"timestamp < '{end_time}' AND timestamp > '{start_time}'"
  limit: 50

get_trip:
  name: get_trip
  threads: 2
  query: f"ride_id = {ride_id}"
  limit: 50

get_trip_length:
  name: get_trip_length
  threads: 2
  query: 
  limit: 50

get_trip_duration:
  name: get_trip_duration
  threads: 2
  query: 
  limit: 50

get_trip_speed:
  name: get_trip_speed
  threads: 2
  query: 
  limit: 50
  
interval_around_timestamp:
  name: interval_around_timestamp
  threads: 2
  query: 
  limit: 50

spatiotemporal:
  name: spatiotemporal
  threads: 2
  query: "DWITHIN(geom, POINT(13.4 52.5), 5000, meters) AND timestamp 
    BETWEEN '2023-07-01T00:00:00Z' AND '2023-07-02T00:00:00Z'"
  limit: 50

# NEW QUERIES 

# Spatial 
identifying_high_risk_areas:
  name: identifying_high_risk_areas
  threads: 2
  query: "BBOX(cycling_data.point_geom, 13.0, 52.0, 14.0, 53.0) AND scary >= 3"
  limit: 50

top_n_streets_with_incidents: #no Streetname exists, maybe skim through the whole area with a sliding window and identify "risky areas"
  name: top_n_streets_with_incidents
  threads: 1
  query: "SELECT StreetName, COUNT(*) as incident_count FROM cycling_data 
    WHERE StreetName IS NOT NULL GROUP BY StreetName ORDER BY incident_count DESC"
  limit: 10


identify_unsafe_routes:
  name: identify_unsafe_routes
  threads: 2
  query: "SELECT route_id, COUNT(*) as incident_count FROM cycling_data WHERE incidents > 5 
    GROUP BY route_id ORDER BY incident_count DESC"
  limit: 50

# Temporal 
incident_counts_over_time:
  name: incident_counts_over_time
  threads: 1
  query: "SELECT DATE(timestamp) as day, COUNT(*) as incident_count FROM cycling_data 
    WHERE timestamp BETWEEN '{start_time}' AND '{end_time}' GROUP BY day ORDER BY day"
  limit: 50

detect_peak_cycling_hours:
  name: detect_peak_cycling_hours
  threads: 1
  query: "SELECT HOUR(timestamp) as hour, COUNT(*) as ride_count FROM cycling_data 
    WHERE timestamp BETWEEN '{start_time}' AND '{end_time}' GROUP BY hour ORDER BY ride_count DESC"
  limit: 50

incident_patterns_by_weekday:
  name: incident_patterns_by_weekday
  threads: 1
  query: "SELECT DAY_OF_WEEK(timestamp) as weekday, COUNT(*) as incidents FROM cycling_data 
    GROUP BY weekday ORDER BY weekday"
  limit: 50

# Spatio-Temporal 
incidents_peak_hours_popular_areas:
  name: incidents_peak_hours_popular_areas
  threads: 2
  query: "DWITHIN(geom, POINT(13.3 52.4), 2000, meters) AND timestamp 
    BETWEEN '2023-07-01T07:00:00Z' AND '2023-07-01T10:00:00Z'"
  limit: 50


near_miss_clustering:
  name: near_miss_clustering
  threads: 2 #TODO check how incident type is implemented in simra UPD: insident 1 - close pass
  query: "DWITHIN(cycling_data.point_geom, POINT(13.5 52.5), 100, meters)  
  AND incident = 1 AND timestamp BETWEEN '2023-07-01T00:00:00Z' AND '2023-07-01T00:10:00Z'"
  limit: 50

incident_density_changes_over_time:
  name: incident_density_changes_over_time
  threads: 2
  query: "SELECT DATE(timestamp) as day, COUNT(*) as incident_count FROM cycling_data 
    WHERE timestamp BETWEEN '2023-07-01T00:00:00Z' AND '2023-08-01T00:00:00Z' GROUP BY day ORDER BY day"
  limit: 50

# Scalability Benchmarks
varying_dataset_sizes:
  name: varying_dataset_sizes
  threads: 2
  query: f"timestamp > {start_time}"
  limit: 100000

resource_scalability:
  name: resource_scalability
  threads: 4
  query: "DWITHIN(cycling_data.point_geom, POINT(13.4 52.5), 10000, meters)"
  limit: -1
  limit: -1
